#lang plai

(let ([b (box 'dummy)])
  (begin (set-box! b b)
         b))

'(let ([fact (lambda (n) (if (= n 0)
                       0
                       (* n (fact (- n 1)))))])
  (fact 10))

(let ([fact (box 'dummy)])
  (let ([fact-fun (lambda (n)
                    (if (zero? n)
                        1
                        (* n ((unbox fact) (- n 1)))))])
    (begin (set-box! fact fact-fun)
           ((unbox fact) 10))))

(let ([fact (box 'dummy)])
  (begin (set-box! fact (lambda (n)
                          (if (zero? n)
                              1
                              (* n ((unbox fact) (- n 1))))))
         ((unbox fact) 10)))

(let ([fact 'dummy])
  (begin (set! fact (lambda (n)
                      (if (zero? n)
                          1
                          (* n (fact (- n 1))))))
         (fact 10)))

'(letrec ([x x]) x)

'(local ([define x x]) x)

(define sum-n
  ((lambda (self)
     (lambda (arg)
       ((lambda (x) (if (> x 1) (/ x 5) x))
        (self self arg))))
   (lambda (self n)
     (if (= n 0) 0 (+ n (self self (- n 1)))))))

(void
 (map (lambda (x)
        (display (sum-n x))
        (newline))
      (foldl (lambda (a b) (cons (expt 10 a) b))
             '()
             (range 7))))


