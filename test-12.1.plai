#lang plai-typed

;;; LOCATION ** BINDING ** ENVIRONMENT
(define-type Binding [bind (name : symbol) (val : Value)])
(define-type-alias Env (listof Binding))
(define mt-env empty)
(define extend-env cons)

;;; INPUT-OUTPUT TYPES
(define-type ExprC
  [numC (n : number)]
  [idC (s : symbol)]
  [appC (fun : ExprC) (arg : ExprC)]
  [plusC (l : ExprC) (r : ExprC)]
  [multC (l : ExprC) (r : ExprC)]
  [lamC (arg : symbol) (body : ExprC)])
(define-type Value
  [numV (n : number)]
  ;; we keep the a-symbol just to recognize which lambda was returned
  [closV (a : symbol) (f : (Value (listof Binding) -> Value))])

;;; INTERPRETER
(define (lookup [for : symbol] [env : Env]): Value
  (cond [(empty? env) (error for "name not bound")]
        [(symbol=? for (bind-name (first env)))
         (bind-val (first env))]
        [else (lookup for (rest env))]))
(define (interp [e : ExprC] [env : Env]) : Value
  (type-case ExprC e
             [numC(n)    (numV n)]
             [lamC(a b)  (closV a (lambda (arg denv)
                                    (interp b (extend-env (bind a arg) denv))))]
             [idC(n)     {lookup n env}]
             [plusC(l r) {num+ (interp l env) (interp r env)}]
             [multC(l r) {num* (interp l env) (interp r env)}]
             [appC(f a)  (let ([a-value (interp a env)])
                           (let ([f-value (interp f env)])
                             (begin ;; (display ">> ")
                                    ;; (display env)
                                    ;; (display "\n")
                                    ((closV-f f-value) a-value env))))]))

;;; USEFUL FUNCTIONS
(define (num+ [l : Value] [r : Value]): Value (numV (+ (numV-n l) (numV-n r))))
(define (num* [l : Value] [r : Value]): Value (numV (* (numV-n l) (numV-n r))))

;; ;;; TESTS
(interp (numC 10) mt-env)
(interp (plusC (numC 10) (numC 10)) mt-env)
(interp (plusC (plusC (plusC (numC 10) (numC 10))
                      (plusC (numC 10) (numC 10)))
               (plusC (plusC (numC 10) (numC 10))
                      (plusC (numC 10) (numC 10))))
        mt-env)

;;; hidden representation of lambdas
(interp (lamC 'a (idC 'a))
        mt-env)

(interp (appC (lamC 'a (idC 'a))
              (numC 100))
        mt-env)

;;; A is dynamically bound to 1000, not to 10
(interp (appC (lamC 'a
                    (appC (appC (lamC 'a (lamC 'b (plusC (idC 'b) (idC 'a))))
                                (numC 10))
                          (numC 100)))
              (numC 1000))
        mt-env)


;;; in dynamic binding this code does not run

;; (interp (appC (appC (lamC 'a (lamC 'b (plusC (idC 'b) (idC 'a))))
;;                     (numC 10))
;;               (numC 100))
;;         mt-env)

;; (interp (appC (appC (lamC 'fun (lamC 'm
;;                                      (appC (appC (idC 'fun) (idC 'fun))
;;                                            (idC 'm))))
;;                     (lamC 'self
;;                           (lamC 'n
;;                                 (multC (idC 'm) (idC 'm)))))
;;               (numC 11))
;;         mt-env)

;; 'okay

