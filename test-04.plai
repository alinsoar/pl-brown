#lang plai-typed

(define-type ArithC
  [numC (n : number)]
  [plusC (l : ArithC) (r : ArithC)]
  [multC (l : ArithC) (r : ArithC)])

(define (interp [a : ArithC]) : number
  (type-case ArithC a
             [numC (n) n]
             [plusC (l r) (+ (interp l) (interp r))]
             [multC (l r) (* (interp l) (interp r))]))

(define-type ArithS
  [numS (n : number)]
  [plusS (l : ArithS) (r : ArithS)]
  [bminusS (l : ArithS) (r : ArithS)]
  [uminusS (e : ArithS)]
  [multS (l : ArithS) (r : ArithS)])

(define (desugar [as : ArithS]) : ArithC
  (type-case ArithS as
             [numS    (n)   (numC n)]
             [plusS   (l r) (plusC (desugar l) (desugar r))]
             [bminusS (l r) (plusC (desugar l)
                                   (multC (numC -1) (desugar r)))]
             [uminusS (e)   (desugar (bminusS (numS 0) e))]
             [multS   (l r) (multC (desugar l) (desugar r))]))

(define (parse [s : s-expression]) : ArithS
  (cond
   [(s-exp-number? s) (numS (s-exp->number s))]
   [(s-exp-list? s)
    (let ([s1 (s-exp->list s)])
      (case (s-exp->symbol (first s1))
        [(+) (plusS (parse (second s1))
                    (parse (third s1)))]
        [(-) (cond
              [(= (length s1) 3) (bminusS (parse (second s1))
                                          (parse (third s1)))]
              [(= (length s1) 2)  (uminusS (parse (second s1)))])]
        [(*) (multS (parse (second s1))
                    (parse (third s1)))]
        [else (error 'parse "invalid list input")]))]
   [else (error 'parse "invalid input")]))

(interp (desugar (parse '(+ 2 (* 3 9)))))

(interp (desugar (parse '5)))

(interp (desugar (parse '(- 10 (- 2 22)))))

(interp (desugar (parse '(- 2 3))))

(interp (desugar (parse '(- 2))))

(interp (desugar (parse '(+ 3 (- 2)))))

