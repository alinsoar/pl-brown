#lang plai-typed

(define (newline) (display "\n\n"))
(define (print val) (begin (display val) (newline)))

(define new-label
  (let ((n 100))
    (lambda ()
      (let ((k n))
        (begin
          (set! n (add1 n))
          k)))))

(define (range n)
  (if (= n 0)
      (list 0)
      (append (range (sub1 n)) (list n))))

(map (lambda (_) (new-label)) (range 10))

(define read1 (lambda () (number->s-exp 10)))
(define read2 (lambda () (number->s-exp 20)))

(define (read-number [prompt : string] [read : ( -> s-expression)]): number
  (begin
    (display prompt)
    (let ([v (read)])
      (if (s-exp-number? v)
          (begin
            (display v)
            (display "\n")
            (s-exp->number v))
          (read-number prompt read)))))

(display (+ (read-number "First number:" read1)
            (read-number "Second number:" read2)))

(newline)

(define-type-alias label number)
(define table (make-hash empty))

(define (read-number/suspend [prompt : string]
                             [read : ( -> s-expression)]
                             [rest : (number -> void)]): void
  (let ([g (new-label)])
    (begin
      (hash-set! table g rest)
      (display prompt)
      (display " To enter it, use the action field label ")
      (display g)
      (display "\n")
      (display "halting: program shut down.")
      (newline))))

(define (resume [g : label] [n : number])
  ((some-v (hash-ref table g)) n))

'(display table)

(read-number/suspend "First number:"
                     read1
                     (lambda (v1)
                       (begin
                         (print (+ v1
                                   (read-number "Second number:" read2))))))

'(hash-ref table 111)
'(some-v (hash-ref table 111))

(resume 111 500)

'---
(read-number/suspend "First number:"
                     read1
                     (lambda (v1)
                       (read-number/suspend "Second number:"
                                            read2
                                            (lambda (v2)
                                              (print (+ v1 v2))))))

(resume 112 2000)

(resume 113 3000)

(newline)

(define cookie '-100)

(read-number/suspend "First number:"
                     read1
                     (lambda (v1)
                       (begin
                         (set! cookie v1)
                         (read-number/suspend "Second number:"
                                              read2
                                              (lambda (v2)
                                                (print (+ cookie v2)))))))

(resume 114 60)
(resume 115 240)

(resume 114 190)
(resume 116 110)

;;; cookie was modified -- unexpected behaviour
(resume 115 240)

'---------------STATELESS-VERSION

(define cookieX -1)

(define (read-number/stateless [prompt : string]
                               [read : ( -> s-expression)]
                               [rest : (number -> void)]): void
  (let ([value (s-exp->number (read))])
    (begin
      (display prompt)
      (display value)
      (display "\n")
      (rest value)
      (display "halting: program shut down.")
      (newline))))

(define prog1
  (lambda (v1)
    (begin
      (set! cookieX v1)
      (read-number/stateless "Second number:"
                             read2
                             prog2))))

(define prog2
  (lambda (v2)
    (print (+ cookieX v2))))

(read-number/stateless "First number:" read1 prog1)


