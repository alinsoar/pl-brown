#lang plai-typed

(define-type ArithC
  [numC (n : number)]
  [plusC (l : ArithC) (r : ArithC)]
  [multC (l : ArithC) (r : ArithC)]
  [condC (expr : ArithC) (true : ArithC) (false : ArithC)])

(define (interp [a : ArithC]) : number
  (type-case ArithC a
             [numC (n) n]
             [plusC (l r) (+ (interp l) (interp r))]
             [multC (l r) (* (interp l) (interp r))]
             [condC (e t f) (if (= 0 (interp e))
                                (interp f)
                                (interp t))]))

(define (parse [s : s-expression]) : ArithC
  (cond
   [(s-exp-number? s) (numC (s-exp->number s))]
   [(s-exp-list? s)
    (let ([s1 (s-exp->list s)])
      (case (s-exp->symbol (first s1))
        [(+) (plusC (parse (second s1))
                    (parse (third s1)))]
        [(*) (multC (parse (second s1))
                    (parse (third s1)))]
        [(if) (condC (parse (second s1))
                     (parse (third s1))
                     (parse (fourth s1)))]
        [else (error 'parse "invalid list input")]))]
   [else (error 'parse "invalid input")]))

(interp (parse '(if 0 10 20)))
(interp (parse '(if 1 10 20)))
